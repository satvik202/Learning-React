testing


types of testing(developer) :
 1. unit testing   -> test components in isolation
 2. integration testing  -> testing the integration of components/modules
 3. End to End testing (e2e testing)


 react testing library
 jest  + (babel dependency for jest)
 configure parcel config file to disable the default babel transpilation
 jest configuration

 jsdom library


 import { sum } from "../src/components/sum";

test("sum calculate the sum of two number", ()=>{
    const result = sum(3,4)

    // assertion
    expect(result).toBe(7)
}) 


 after all of these there are still some configurations needed
 for unit testing

 install @babel/preset-react to enable jsx testing
 include @babel/preset-react inside babel.config.js
 install npm install --save-dev @testing-library/jest-dom  & then import it

 module.exports = {
    presets: [
      ['@babel/preset-env', {targets: {node: 'current'}}],
      ["@babel/preset-react", {runtime: "automatic"}]
  ],
  };


eg: 

import Contact from "../src/components/Contact";
import {render, screen} from "@testing-library/react"
import '@testing-library/jest-dom'

test("the contack page should be rendered", ()=>{

    render(<Contact/>)

    const heading = screen.getAllByRole("textbox")  // return the react object <h*> *->1,2,3,4,5,6. if there are multiple headings
    console.log(heading)                                      // you need to use getAllByRole("heading")--> it will return the array of all the headings
    expect(heading.length).toBe(2)

})

node -> it()===test()