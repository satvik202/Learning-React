To get a project to production level we need to bundle all the files in our code repo.
This is done by bundler.
The code should also be optimized --> chunking, image optimization, code splitting and a lot of other stuff.

React together with other packages sometimes called dependencies make our project fast!

npm is a package manager but it's full form is not node package manager.
almost every package that one need to installl is hosted over there

To add npm --> npm init  / npm init -y


bundler --> webpack, parcel, vite (example).     Create-react-app --> uses webpack behind the scenes

We'll use parcel

npm install -D parcel      // what's -D? there are 2 types of package we can install 
                           1. dev dependency (require in dev phase)     2. normal dependencies (used in production)

so it's basically saying we need parcel as a dev dependency.

now parcel is installed as a devDepencendy. see package.json.
there you'll find something like "^version".  (you can also use "~version" (not recommended))

^ (caret) automatically the package is updated to new minor version  2.8.3 ---> 2.8.4
~ (tilde) automatically updates to major version      2.8.3 ---> 3.0.0

now there's a package-lock.json file in the codebase as well. what is this?

package.json  --> it's a configuration for npm. it keeps track of what version of packages are installed in the app

package-lock.json --> keeps track of exact version that is being install

In summary, the package.json file focuses on project metadata and specifying the desired versions of dependencies, 
while the package-lock.json file ensures deterministic installations by locking the exact versions of dependencies
and their dependencies. 

node modules --> this is where actuall dependencies lies. It tends to be quite heavy as 
let's say we installed parcel as a dependency. parcel have it's own set of dependencies and those dependencies can further
may have other dependencies.    this is known transitive dependency

you do not need to push node_modules to github (so add it to gitignore) but always remember to push package.json and
package-lock.json.  you can get back the node modules by doing --> npm install (only if package.json and package-lock is present)

NPM is a package manager that is used to install, uninstall, and update Javascript packages on your workstation,
whereas NPX is a package executer that is used to directly execute Javascript packages without installing them.

igniting the app --> npx parcel index.html

parcel hosted our project on a local server with port 1234

now it is not prefered to use CDN link to inject react in the project instead use npm to install it in the node modules
do this instead :
npm install react
npm install react-dom

now we should import react and react-dom in app.js file where we are using react. we'll need to add type="module" in the sript
tag in index.html before this though otherwise you'll get an error as import is not part of normal Javascript

## parcel -> 1. dev build     2. local server      3. HMR --> Hot Module Replacement   4. faster build becasue of caching
#            5. Image Optimization         6. minification          7. compression of file        8.bundling
#           9. consistent hashing       10. code splitting         11. differential bundling (support older browser)
#            12. diagnostics           13. error handling     14. HTTPS (we can host project here as well)
#           15.   Tree Shaking --> remove unnessesary and unwanted/unused code  


16. parcel uses a file watching algorithm (which is written in C++) it build the dev and server each time it 
detects a change in the code

17. different dev and production bundles

to host the application for profuction use :   npx parcel build index.html

the term "build" refers to the process of transforming and preparing your web application for deployment. 
By running the build command, you're essentially telling Parcel to perform all essential tasks and prepare your project for production. 
This process helps ensure that your web application is efficient, performs well, and is ready for deployment to a live server

so while doing so you may get an error like :
Target "main" declares an output file path of "app.js" which does not match the compiled 
bundle type "html".
this is due to the reason mismatch between the declared output file path in your Parcel configuration
and the compiled bundle type. The configuration is set to output a file named "app.js,"
which suggests a JavaScript bundle, but the compiled bundle type is identified as "html." so you'll need to remove main : "app.js"
from package.json


now to make our application support older browsers we can add "browserslist" : [array for versions] in package.json

and with this we have Made what create-React-app does automatically!